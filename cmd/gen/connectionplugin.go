package gen

import (
	"bytes"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

func ConnectionPlugin(plugins []string) {
	log.Println("Generating connection plugin funcs -", strings.Join(plugins, ","))

	for _, p := range plugins {
		pluginFile := strings.ToLower(p) + "_gen.go"
		pluginFullFilePath := filepath.Join(getScriptPath(), "..", "..", "pkg", "connection", pluginFile)
		if err := os.Remove(pluginFullFilePath); err != nil && !os.IsNotExist(err) {
			log.Fatalln(err)
		}
		createFile(pluginFullFilePath,
			fmt.Sprintf("package connection\n\n"+
				"// Code generated by connection-plugin --plugin=%s; DO NOT EDIT.\n", p))
		appendFileContent(pluginFullFilePath, connectionPluginFuncs(p))
	}
}

func connectionPluginFuncs(p string) string {
	tmplStr := `
func (p *{{.Plugin}}) GetName() string {
	return p.Name
}
`
	tmpl, err := template.New("connectionPluginFuncs").Parse(tmplStr)
	if err != nil {
		log.Fatalln(err)
	}

	buf := &bytes.Buffer{}
	err = tmpl.Execute(buf, struct{ Plugin string }{p})
	if err != nil {
		log.Fatalln(err)
	}
	return buf.String()
}
