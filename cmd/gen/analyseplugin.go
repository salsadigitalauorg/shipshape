package gen

import (
	"bytes"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

func AnalysePlugin(plugins []string) {
	log.Println("Generating analyse plugin funcs -", strings.Join(plugins, ","))

	importLine := "import \"github.com/salsadigitalauorg/shipshape/pkg/fact\"\n"
	importLine += "import \"github.com/salsadigitalauorg/shipshape/pkg/result\"\n"
	importLine += "import log \"github.com/sirupsen/logrus\"\n\n"

	for _, p := range plugins {
		pluginFile := strings.ToLower(p) + "_gen.go"
		pluginFullFilePath := filepath.Join(getScriptPath(), "..", "..", "pkg", "analyse", pluginFile)
		if err := os.Remove(pluginFullFilePath); err != nil && !os.IsNotExist(err) {
			log.Fatalln(err)
		}
		createFile(pluginFullFilePath, "package analyse\n\n")
		appendFileContent(pluginFullFilePath, importLine)
		appendFileContent(pluginFullFilePath, fmt.Sprintf(
			"// Code generated by analyse-plugin --plugin=%s; DO NOT EDIT.\n", p))
		appendFileContent(pluginFullFilePath, analysePluginFuncs(p))
	}
}

func analysePluginFuncs(p string) string {
	tmplStr := `
func New{{.Plugin}}(n string) *{{.Plugin}} {
	return &{{.Plugin}}{
		Name: n,
		Result: result.Result{Name: n, Severity: "normal"},
	}
}

func (p *{{.Plugin}}) GetName() string {
	return p.Name
}

func (p *{{.Plugin}}) GetInputName() string {
	return p.InputName
}

func (p *{{.Plugin}}) GetResult() result.Result {
	return p.Result
}

func (p *{{.Plugin}}) ValidateInput() error {
	log.WithFields(log.Fields{
		"analyser": p.Name,
	}).Debug("validating input")

	plugin := fact.GetInstance(p.InputName)
	if plugin == nil {
		return &fact.ErrSupportNotFound{SupportType: "input"}
	}

	p.input = plugin
	return nil
}

// AddBreach appends a Breach to the Result.
func (p *{{.Plugin}}) AddBreach(b result.Breach) {
	b.SetCommonValues("", p.Name, p.Severity)
	p.Result.Breaches = append(
		p.Result.Breaches,
		b,
	)
}
`
	tmpl, err := template.New("analysePluginFuncs").Parse(tmplStr)
	if err != nil {
		log.Fatalln(err)
	}

	buf := &bytes.Buffer{}
	err = tmpl.Execute(buf, struct{ Plugin string }{p})
	if err != nil {
		log.Fatalln(err)
	}
	return buf.String()
}
