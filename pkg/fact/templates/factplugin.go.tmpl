package {{ .Package }}

import (
	log "github.com/sirupsen/logrus"

	"github.com/salsadigitalauorg/shipshape/pkg/connection"
	"github.com/salsadigitalauorg/shipshape/pkg/fact"
)

// Code generated by fact-plugin --plugin={{ .Plugin }} --package={{ .Package }}; DO NOT EDIT.

func (p *{{ .Plugin }}) GetName() string {
	return p.Name
}

func (p *{{ .Plugin }}) GetData() interface{} {
	return p.data
}

func (p *{{ .Plugin }}) GetFormat() fact.FactFormat {
	return p.Format
}

func (p *{{ .Plugin }}) GetConnectionName() string {
	return p.ConnectionName
}

func (p *{{ .Plugin }}) GetInputName() string {
	return p.InputName
}

func (p *{{ .Plugin }}) GetErrors() []error {
	if p.input != nil {
		return append(p.errors, p.input.GetErrors()...)
	}
	return p.errors
}

func (p *{{ .Plugin }}) ValidateConnection() error {
  connectionSupport, supportedConnections := p.SupportedConnections()
	log.WithFields(log.Fields{
		"fact": p.Name,
		"connection-support": connectionSupport,
		"supported-connections": supportedConnections,
	}).Debug("validating connection")

	if (connectionSupport == fact.SupportOptional ||
			connectionSupport == fact.SupportNone) &&
			len(supportedConnections) == 0 && p.ConnectionName == "" {
		return nil
	}

	if connectionSupport == fact.SupportRequired && p.ConnectionName == "" {
		return &fact.ErrSupportRequired{SupportType: "connection"}
	}

	plugin := connection.GetInstance(p.ConnectionName)
	if plugin == nil {
		return &fact.ErrSupportNotFound{SupportType: "connection"}
	}

	for _, s := range supportedConnections {
		if plugin.PluginName() == s {
			p.connection = plugin
			return nil
		}
	}
	return &fact.ErrSupportNone{SupportType: "connection"}
}

func (p *{{ .Plugin }}) ValidateInput() error {
	inputSupport, supportedInputs := p.SupportedInputs()
	log.WithFields(log.Fields{
		"fact": p.Name,
		"input-support": inputSupport,
		"supported-inputs": supportedInputs,
	}).Debug("validating input")

	if (inputSupport == fact.SupportOptional ||
			inputSupport == fact.SupportNone) &&
			len(supportedInputs) == 0 && p.ConnectionName == "" {
		return nil
	}

	if inputSupport == fact.SupportRequired && p.InputName == "" {
		return &fact.ErrSupportRequired{SupportType: "input"}
	}

	plugin := fact.GetInstance(p.InputName)
	if plugin == nil {
		return &fact.ErrSupportNotFound{SupportType: "input"}
	}

	for _, s := range supportedInputs {
		if plugin.PluginName() == s {
			p.input = plugin
			return nil
		}
	}
	return &fact.ErrSupportNone{SupportType: "input"}
}
